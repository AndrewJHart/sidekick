@import 'jeet/normalize.css'
@import 'nib/gradients'
@import 'nib/vendor'
@import 'jeet/theme'

bs()
    -moz-box-sizing border-box
    -webkit-box-sizing border-box
    box-sizing border-box
    *behavior url(js/vendor/boxsizing.htc)
*
    bs()
html
    overflow-y scroll
    overflow-x hidden
    font-family Arial, "Helvetica Neue", Helvetica, sans-serif
input, textarea
    color #000
.placeholder
    color #aaa
img, video, audio, embed, object, input, iframe
    max-width 100%
last()
    margin-right 0

/////////////////
// Semantic.gs // for Stylus: http://learnboost.github.com/stylus/
// Heavily customized for Jeet Framework
/////////////////

// Defaults which you can freely override
column-width = 30px
gutter-width = 30px
columns = 24
max_width = 1410px
max_width_padding = 15px
mobile_width = 705px

// Utility variable â€” you should never need to modify this
_gridsystem-width = (column-width + gutter-width) * columns

// Set @total-width to 100% for a fluid layout
total-width = 100%

// Correcting percentage-to-pixel rounding errors in IE6 & 7
// See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
// Override @min with the minimum width of your layout
min-width = max_width
correction = (((0.5 / min-width) * 100) * 1%)

cf()
    *zoom 1
    &:before, &:after
        content ""
        display table
    &:after
        clear both
body
    width 100%
    cf()
col(x, center = false, columns = columns)
    display inline
    float left
    cf()
    width total-width * ((((gutter-width + column-width ) * x) - gutter-width) / (_gridsystem-width - gutter-width))
    margin-right (total-width * ( (gutter-width * 0.5) / (_gridsystem-width - gutter-width))) * 2
    *width total-width * ((((gutter-width + column-width ) * x) - gutter-width) / _gridsystem-width)-correction
    *margin-right (total-width * ( (gutter-width * 0.5) / _gridsystem-width)-correction) * 2
    &:last-child
        last()
    if (center == c)
        float none
        display inline-block
        *display inline
        margin-right auto
        margin auto
        *margin-right auto
        *margin auto
offset(offset = 1)
    margin-left ((total-width * ( (gutter-width * 0.5) / (_gridsystem-width - gutter-width))) * 4) * offset
span(x, center = false, columns = columns)
    display inline
    float left
    cf()
    width total-width * ((((gutter-width + column-width ) * x) - gutter-width) / _gridsystem-width)
    padding-left total-width * ( (gutter-width * 0.5) / _gridsystem-width)
    padding-right total-width * ( (gutter-width * 0.5) / _gridsystem-width)
    *width total-width * ((((gutter-width + column-width ) * x) - gutter-width) / _gridsystem-width)-correction
    *padding-left total-width * ( (gutter-width * 0.5) / _gridsystem-width)-correction
    *padding-right total-width * ( (gutter-width * 0.5) / _gridsystem-width)-correction
    box-sizing(content-box)
    if (center == c)
        float none
        display inline-block
        *display inline
        margin auto
        *margin auto
center(width = max_width)
    max-width width
    margin 0 auto !important
    cf()
    padding 0 max_width_padding
vc()
    display -webkit-flex
    display flex
    -webkit-justify-content center
    justify-content center
    -webkit-align-items center
    align-items center